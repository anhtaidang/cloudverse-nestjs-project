# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AuthLoginDto {
  email: String!
  password: String!
}

input AuthRegisterDTO {
  confirmPassword: String!
  email: String!
  fullName: String!
  password: String!
  roleId: Float!
}

type Blog {
  author: String
  content: String
  createdAt: DateTime!
  createdBy: Float
  datePublished: String
  id: Float!
  title: String
  updatedAt: DateTime!
  updatedBy: Float
}

input BlogCreateInput {
  author: String!
  content: String!
  datePublished: String!
  title: String!
}

input BlogUpdateInput {
  author: String!
  content: String!
  datePublished: String!
  title: String!
}

input BlogWhereInput {
  author: StringNullableFilter
  createdAt: DateTimeNullableFilter
  createdBy: Float
  datePublished: StringNullableFilter
  id: FloatNullableFilter
  title: StringNullableFilter
  updatedAt: DateTimeNullableFilter
  updatedBy: Float
}

input BlogWhereUniqueInput {
  id: Float!
}

input BooleanFilter {
  equals: Boolean
  not: Boolean
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input FloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: Float
  notIn: [Float!]
}

type LoginResponse {
  role: String!
  user: User!
}

type Mutation {
  createBlog(data: BlogCreateInput!): Blog!
  createPermissionRole(data: PermissionRoleCreateInput!): PermissionRole!
  deleteBlog(where: BlogWhereUniqueInput!): Blog!
  login(loginInput: AuthLoginDto!): LoginResponse!
  logout: String!
  refreshToken: String!
  register(authRegister: AuthRegisterDTO!): RegisterResponse!
  updateBlog(data: BlogUpdateInput!, where: BlogWhereUniqueInput!): Blog!
  updatePermissionRole(data: PermissionRoleUpdateInput!, where: PermissionRoleWhereUniqueInput!): PermissionRole!
}

type PermissionRole {
  canDelete: Boolean
  canRead: Boolean
  canUpdate: Boolean
  canWrite: Boolean
  createdAt: DateTime!
  id: Float!
  nameRole: String
  updatedAt: DateTime!
}

input PermissionRoleCreateInput {
  canDelete: Boolean!
  canRead: Boolean!
  canUpdate: Boolean!
  canWrite: Boolean!
  nameRole: String!
}

input PermissionRoleUpdateInput {
  canDelete: Boolean!
  canRead: Boolean!
  canUpdate: Boolean!
  canWrite: Boolean!
  nameRole: String
}

input PermissionRoleWhereInput {
  canDelete: BooleanFilter
  canRead: BooleanFilter
  canUpdate: BooleanFilter
  canWrite: BooleanFilter
  id: FloatNullableFilter
  nameRole: StringNullableFilter
}

input PermissionRoleWhereUniqueInput {
  id: Float!
}

type Query {
  blog(where: BlogWhereUniqueInput!): Blog!
  blogs(skip: Float, take: Float, where: BlogWhereInput!): [Blog!]!
  permissionRole(where: PermissionRoleWhereUniqueInput!): PermissionRole!
  permissionRoles(where: PermissionRoleWhereInput!): [PermissionRole!]!
}

enum QueryMode {
  Default
  Insensitive
}

type RegisterResponse {
  role: String!
  user: User!
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

type User {
  avatarUrl: String
  createdAt: DateTime
  email: String!
  fullName: String!
  id: Float
  password: String
  updatedAt: DateTime
}